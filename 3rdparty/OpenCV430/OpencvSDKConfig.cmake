# Determine host platform
# include(${CMAKE_CURRENT_LIST_DIR}/cmake/DetermineHostPlatform.cmake)

if(OB_BUILD_WIN32)
    set(OPENCV_LIB_PREFIX "")
    set(OPENCV_LIB_SUFFIX ".lib")
    set(OPENCV_DLL_SUFFIX ".dll")

    set(BUILD_PLATFORM "Windows")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "win_x64")
    else()
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "win_x86")
    endif()
elseif(OB_BUILD_MACOS)
    set(OPENCV_LIB_PREFIX "lib")
    set(OPENCV_LIB_SUFFIX ".dylib")
    set(OPENCV_DLL_SUFFIX ".dylib")

    set(BUILD_PLATFORM "MacOS")
    if(CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "x64")
    elseif(CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "arm64")
    else()
        if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "x64")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
            set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "arm64")
        endif()
    endif()


elseif(UNIX)
    set(OPENCV_LIB_PREFIX "lib")
    set(OPENCV_LIB_SUFFIX ".so")
    set(OPENCV_DLL_SUFFIX ".so")

    if(OB_BUILD_LINUX)
        set(BUILD_PLATFORM "Linux")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    elseif(OB_BUILD_LINUX_ARM64)
        set(BUILD_PLATFORM "LinuxArm64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    elseif(OB_BUILD_LINUX_ARM32)
        set(BUILD_PLATFORM "LinuxArm32")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    endif()
endif()

# OPENCVSDK library
set(OPENCVSDK_LIBS_DIR ${CMAKE_CURRENT_SOURCE_DIR}/lib/${BUILD_PLATFORM}/lib/${BUILD_PLATFORM_LIB_INSTRUCTION_TYPE})
set(OPENCVSDK_LIBRARY  ${OPENCVSDK_LIBS_DIR}/${OPENCV_LIB_PREFIX}opencv_world430${OPENCV_LIB_SUFFIX})
set(OPENCVSDK_DLL ${OPENCVSDK_LIBS_DIR}/${OPENCV_LIB_PREFIX}opencv_world430${OPENCV_DLL_SUFFIX})
set(OPENCVSDK_INCLUDE_DIRS ${CMAKE_CURRENT_SOURCE_DIR}/${BUILD_PLATFORM}/include/)
set(OPENCVSDK_LIBS ${OPENCVSDK_LIBRARY})
set(OPENCVSDK_FOUND TRUE)

add_library(OPENCVSDK::OPENCVSDK SHARED IMPORTED GLOBAL)
set_target_properties(OPENCVSDK::OPENCVSDK PROPERTIES
    IMPORTED_LOCATION ${OPENCVSDK_DLL}
    IMPORTED_IMPLIB ${OPENCVSDK_LIBRARY}
    INTERFACE_INCLUDE_DIRECTORIES ${OPENCVSDK_INCLUDE_DIRS}
)

set(OPENCVSDK_LIBS ${OPENCVSDK_LIBRARY})
file(GLOB OPENCVSDK_DLL_FILES ${OPENCVSDK_LIBS_DIR}/*${OPENCV_DLL_SUFFIX}*)

# runtime resource file should copy to cwd.
file(GLOB OPENCVSDK_RUNTIME_RESOURCE_FILES  ${OPENCVSDK_LIBS_DIR}/*depthengine*)

# config file
file(GLOB OPENCVSDK_CONFIG_FILES  ${CMAKE_CURRENT_LIST_DIR}/misc/config/*)

# script
if(WIN32)
    file(GLOB OPENCVSDK_SCRIPT_FILES  ${CMAKE_CURRENT_LIST_DIR}/misc/scripts/obsensor_metadata_win10*)
else()
    file(GLOB OPENCVSDK_SCRIPT_FILES  ${CMAKE_CURRENT_LIST_DIR}/misc/scripts/*rules*)
endif()

set(OPENCVSDK_FOUND TRUE)