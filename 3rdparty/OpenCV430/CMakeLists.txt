cmake_minimum_required(VERSION 3.5)

if(OB_BUILD_WIN32)
    set(OPENCV_LIB_PREFIX "")
    set(OPENCV_LIB_SUFFIX ".lib")
    set(OPENCV_DLL_SUFFIX ".dll")

    set(BUILD_PLATFORM "Windows")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "win_x64")
    else()
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "win_x86")
    endif()
elseif(OB_BUILD_MACOS)
    set(OPENCV_LIB_PREFIX "lib")
    set(OPENCV_LIB_SUFFIX ".dylib")
    set(OPENCV_DLL_SUFFIX ".dylib")

    set(BUILD_PLATFORM "MacOS")
    if(CMAKE_OSX_ARCHITECTURES STREQUAL "x86_64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "x64")
    elseif(CMAKE_OSX_ARCHITECTURES STREQUAL "arm64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "arm64")
    else()
        if(CMAKE_SYSTEM_PROCESSOR STREQUAL "x86_64")
            set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "x64")
        elseif(CMAKE_SYSTEM_PROCESSOR STREQUAL "arm64")
            set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "arm64")
        endif()
    endif()


elseif(UNIX)
    set(OPENCV_LIB_PREFIX "lib")
    set(OPENCV_LIB_SUFFIX ".so")
    set(OPENCV_DLL_SUFFIX ".so")

    if(OB_BUILD_LINUX)
        set(BUILD_PLATFORM "Linux")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    elseif(OB_BUILD_LINUX_ARM64)
        set(BUILD_PLATFORM "LinuxArm64")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    elseif(OB_BUILD_LINUX_ARM32)
        set(BUILD_PLATFORM "LinuxArm32")
        set(BUILD_PLATFORM_LIB_INSTRUCTION_TYPE "")
    endif()
endif()

# OPENCV library
set(OPENCV_LIBS_DIR ${CMAKE_CURRENT_LIST_DIR}/lib/${BUILD_PLATFORM}/lib/${BUILD_PLATFORM_LIB_INSTRUCTION_TYPE})
set(OPENCV_LIBRARY  ${OPENCV_LIBS_DIR}/${OPENCV_LIB_PREFIX}opencv_world430${OPENCV_LIB_SUFFIX})
set(OPENCV_DLL ${OPENCV_LIBS_DIR}/${OPENCV_LIB_PREFIX}opencv_world430${OPENCV_DLL_SUFFIX})
set(OPENCV_INCLUDE_DIRS ${CMAKE_CURRENT_LIST_DIR}/lib/${BUILD_PLATFORM}/include)
set(OPENCV_LIBS ${OPENCV_LIBRARY})
set(OPENCV_FOUND TRUE)
include_directories(${OPENCV_INCLUDE_DIRS})
add_library(opencv SHARED IMPORTED GLOBAL)
# target_include_directories(opencv INTERFACE ${OPENCV_INCLUDE_DIRS})
set_target_properties(opencv PROPERTIES
    IMPORTED_LOCATION ${OPENCV_DLL}
    IMPORTED_IMPLIB ${OPENCV_LIBRARY}
    # INTERFACE_INCLUDE_DIRECTORIES ${OPENCV_INCLUDE_DIRS}
)

# message("**********OPENCV_INCLUDE_DIRS : ${OPENCV_INCLUDE_DIRS}")

add_library(opencv::opencv ALIAS opencv)