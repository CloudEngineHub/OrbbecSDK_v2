
#Cross Compiling for Linux

# configure target system info
SET(CMAKE_SYSTEM_NAME Linux)
set(CMAKE_SYSTEM_PROCESSOR arm)

#sysroot,It can also be set in the compile flag
#For example set(CMAKE_CXX_FLAGS "--sysroot=/opt/fsl-imx-fb/qt5/sysroots/cortexa9hf-neon-poky-linux-gnueabi ${CMAKE_CXX_FLAGS}")
#set(CMAKE_SYSROOT /opt/fsl-imx-fb/qt5/sysroots/cortexa9hf-neon-poky-linux-gnueabi)

#The CMAKE_STAGING_PREFIX is also optional. It may be used to specify a path on the host to install to. The CMAKE_INSTALL_PREFIX is always the runtime installation location, even when cross-compiling.
#set(CMAKE_STAGING_PREFIX //home/luoen/arm-linux/NewCalibParamsParse/thirdParty/jsoncpp-1.8.4/build/install)

# specify the cross compiler
SET(CMAKE_C_COMPILER /home/luoen/Desktop/arm-gcc_9201/opt/toolchain/gcc-linaro-5.4.1-2017.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-gcc)
SET(CMAKE_CXX_COMPILER /home/luoen/Desktop/arm-gcc_9201/opt/toolchain/gcc-linaro-5.4.1-2017.05-x86_64_arm-linux-gnueabihf/bin/arm-linux-gnueabihf-g++)
# set compiler flags
#set(CMAKE_C_FLAGS "-march=armv7-a -mfpu=neon  -mfloat-abi=hard -mcpu=cortex-a9 ${CMAKE_CXX_FLAGS}")
#set(CMAKE_CXX_FLAGS "-march=armv7-a -mfpu=neon  -mfloat-abi=hard -mcpu=cortex-a9 ${CMAKE_CXX_FLAGS}")

# where is the target environment 
#SET(CMAKE_FIND_ROOT_PATH  /opt/fsl-imx-fb/qt5/sysroots/cortexa9hf-neon-poky-linux-gnueabi)

#CMake find_* commands will look in the sysroot, and the CMAKE_FIND_ROOT_PATH entries by default in all cases, as well as looking in the host system root prefix.
# search for programs in the build host directories (not necessary)
SET(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)
# for libraries and headers in the target directories
SET(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
SET(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_PACKAGE ONLY)

# configure Qt
#SET(QT_QMAKE_EXECUTABLE /opt/fsl-imx-fb/qt5/sysroots/x86_64-pokysdk-linux/usr/bin/qt5/qmake)

# configure Boost
#SET(BOOST_ROOT /opt/boost_arm)

